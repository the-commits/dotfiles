" ================================================
" üåê Allm√§nna inst√§llningar
" ================================================
set nocompatible
filetype plugin indent on
syntax on
set encoding=utf-8
set number
set relativenumber
set ruler
set hidden

" ================================================
" üõ†Ô∏è UI / Livskvalitet
" ================================================
set mouse=a
set showcmd
set cursorline
set wildmenu
set wildmode=longest:full,full
set wrap
set linebreak
set showmatch
set scrolloff=5
set timeoutlen=500
set laststatus=2
set statusline=\"%{expand('%:t')}\"\ %M\ line\ %l\ of\ %L\ --%P%%%%--\ col\ %c

if has('clipboard')
  set clipboard=unnamedplus
endif

" ================================================
" ‚å®Ô∏è Tangentbordsmappningar
" ================================================
let g:mapleader="\<Space>"
let g:maplocalleader=','

" Vim-specifika mappningar (inte Neovim)
if !has('nvim')
  " Plats f√∂r Vim-specifika mappningar om det beh√∂vs
endif

" WhichKey-integration
nnoremap <silent> <leader>      :<c-u>WhichKey '<Space>'<CR>
nnoremap <silent> <localleader> :<c-u>WhichKey  ','<CR>

" Ladda om .vimrc
nnoremap <leader>s :source $MYVIMRC \| :nohlsearch<CR> \| :PlugInstall<CR>

" Urklippshantering (om xclip finns)
if executable('xclip')
  nnoremap <Leader>y :w !xclip -selection clipboard<CR>
  nnoremap <Leader>p :r !xclip -selection clipboard -o<CR>
endif

" ================================================
" üìù Indentering
" ================================================
set tabstop=2
set shiftwidth=2
set expandtab
set autoindent
set smartindent

" ================================================
" üìÅ Filtr√§d (NERDTree etc.)
" ================================================
" map <leader>n :NERDTreeToggle<CR>

" ================================================
" üîç S√∂kning
" ================================================
set ignorecase
set smartcase
set incsearch
set hlsearch

" ================================================
" üìÑ Buffertar & F√∂nster
" ================================================
set splitbelow
set splitright

" ================================================
" üß™ Plugins (vim-plug)
" ================================================
" vimwiki
let g:vimwiki_list = [{
      \ 'path': '~/Dokument/', 
      \ 'path_html': '~/Publikt/html/wiki/',
      \ 'auto_toc': 1,
      \ 'auto_export': 1,
      \ 'index': 'Dokument',
      \ 'diary_rel_path': 'Personligt/TheCommits/Dagbok/',
      \ 'diary_index': 'Dagbok',
      \ 'diary_header': 'Dagbok',
      \ 'generated_links_caption': 1,
      \ 'auto_tags': 1,
      \ }]

call plug#begin()
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'ludovicchabant/vim-gutentags'
  Plug 'vim-vdebug/vdebug'
  Plug 'vimwiki/vimwiki'
  Plug 'artanikin/vim-synthwave84'
  Plug 'liuchengxu/vim-which-key'
  Plug 'tpope/vim-sensible'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-speeddating'
  Plug 'tpope/vim-repeat'
call plug#end()

" ================================================
" üß† Autocomplete med coc.nvim
" https://github.com/neoclide/coc.nvim?tab=readme-ov-file#example-lua-configuration
" ================================================
set shortmess+=c
set cmdheight=2
set signcolumn=yes
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
inoremap <expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Mappningar f√∂r att g√• till definition, referenser etc.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Anv√§nd <leader>rn f√∂r att byta namn p√• symbol (rename)
nmap <leader>rn <Plug>(coc-rename)

" Exempel p√• mappning f√∂r att visa diagnostik (fel och varningar)
nmap <silent> <leader>dp <Plug>(coc-diagnostic-prev)
nmap <silent> <leader>dn <Plug>(coc-diagnostic-next)

" Fixa fel automatiskt med CocAction (t.ex. ESLint fix)
nmap <leader>cf <Plug>(coc-codeaction-cursor)

" ================================================
" üêÉ Gutentags - Automatisk projekt-ctags
" ================================================
let g:gutentags_project_root = ['.git', '.svn', '.hg']
let g:gutentags_ctags_executable = 'ctags' 
let g:gutentags_generate_project_tags_file = 0
let g:gutentags_project_tags_filename = ".tags"
let g:gutentags_cache_dir = expand('~/.vim/projects')
let g:gutentags_ctags_lang_options = {
    \ 'php': '--fields=+aimS --languages=php --php-kinds=+cfivm',
    \ 'javascript': '--fields=+aimS --javascript-kinds=+cfmpv',
    \ 'sh': '--fields=+aimS --sh-kinds=+f',
    \ }
let g:gutentags_ctags_exclude_project_local = ['vendor', 'node_modules', '.git']
let g:gutentags_debounce_milliseconds = 1000 
let g:gutentags_generate_on_missing = 1
let g:gutentags_generate_on_new = 1
let g:gutentags_enabled_notify = 1

" ================================================
" üß© Ladda funktioner fr√•n autoload
" ================================================
" Keybindings fr√•n plugins
" https://www.vim.org/scripts/script.php?script_id=1697 (line_numbers.vim)
call line_numbers#ToggleLineNumbers()

" WhichKey-mappningar fr√•n autoload-filer
call which_key_mapping_windows#Init()
call which_key_mapping_tags#Init()

" ================================================
" üß∑ Terminalinst√§llningar
" ================================================
syntax enable
if exists('term')
  if has('xterm-256color')
    set term=xterm-256color
  elseif has('screen-256color')
    set term=screen-256color
  endif
endif
if has('termguicolors')
  set termguicolors
endif
set background=dark
colorscheme synthwave84

" Transparent bakgrund
autocmd VimEnter * hi Normal guibg=NONE ctermbg=NONE
autocmd ColorScheme * hi Normal guibg=NONE ctermbg=NONE

" ================================================
" üîÑ Automatisk Ctags f√∂r Vim-konfiguration
" ================================================
augroup AutoUpdateVimConfigTagsSimple
  autocmd!
  autocmd BufWritePost ~/.vimrc,${HOME}/.vim/**/* call s:UpdateVimConfigTagsSimple()
augroup END

function! s:UpdateVimConfigTagsSimple()
  let l:ctags_command = 'ctags -R --exclude=.netrw_historyrc -f ~/.vim/tags ~/.vimrc ~/.vim'
  let l:output = system(l:ctags_command)
  if v:shell_error > 0
    echohl ErrorMsg
    echomerr "‚õî Fel: Ctags-uppdatering f√∂r Vim-konfig misslyckades!"
    echohl None
    echom "   Kommando som k√∂rdes: " . l:ctags_command
    if !empty(l:output)
      echom "   Output fr√•n ctags: " . l:output
    endif
  endif
endfunction

" ================================================
" üîñ Generella Tagginst√§llningar
" ================================================
" S√∂kv√§g f√∂r ctags-filer.
" Gutentags kommer att l√§gga till sin projektspecifika fil F√ñRST i denna lista.
" './.tags' och './tags': Letar efter en lokal .tags- eller tags-fil.
" 'tags': Letar efter en tags-fil i nuvarande katalog och upp√•t (beroende p√• 'tagrelative').
" '~/.vim/tags': Din globala Vim-konfigurations-tags.
set tags=./.tags,./tags,tags,~/.vim/tags
